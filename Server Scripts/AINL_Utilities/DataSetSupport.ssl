/********************************************************************************
Description.. :	

Parameters... :	- 

Returns...... :	- 

Author....... :	DDA
Date......... : 2020-10-02
********************************************************************************
_______________________________________________________________________________
Ticket....... : 
Modification. :
Author....... :	
Date......... :	
_______________________________________________________________________________
********************************************************************************/;
/* region SingleRowDataSetToObject(ds : DataSet) : udObject;
/* 	udObject
		- contains all the columns of the first row as properties in a single object;
		
:PROCEDURE SingleRowDataSetToObject;
	:PARAMETERS ds;
	
	:DECLARE dt, row;
			
	dt := ds:Tables[0];
		
	:IF dt:Rows:Count > 0;
		row := dt:Rows[0];
		:RETURN DoProc("DataRowToObject", {row});
	:ELSE;
		:RETURN Nil;
	:ENDIF;	
:ENDPROC;
/* endregion;

/* region DataRowToObject(row : DataRow) : udObject;
/* 	udObject
	- contains all the columns of the row as properties in a single object;
		
:PROCEDURE DataRowToObject;
	:PARAMETERS row;
	
	:DECLARE o, dt, col;
	:DECLARE i;
			
	o  := CreateUdObject();
	dt := row:Table;
			
	:FOR i := 0 :TO dt:Columns:Count - 1;
		col := dt:Columns[i];
						
		:IF !row:IsNull(col:ColumnName);
			o:SetProperty(col:ColumnName, row[col:ColumnName]);
		:ELSE;				
			o:SetProperty(col:ColumnName, Nil);
		:ENDIF;
	:NEXT;
			
	:RETURN o;
:ENDPROC;
/* endregion;

/* region DataSourceToDataSet(sDataSourceLocation : string, aParams : object[]) : DataSet;
:PROCEDURE DataSourceToDataSet;
	:PARAMETERS sDataSourceLocation, aParams;
	
	:DECLARE ds;
			
	ds := RunDs(sDataSourceLocation, aParams, "xml");
	ds := ExecFunction("Enterprise_Server.DataSetSupport.DsFromString", {ds});
			
	:RETURN ds;
:ENDPROC;
/* endregion;

/* region DataSourceToDataTable(sDataSourceLocation : string, aParams : object[]) : DataTable;
:PROCEDURE DataSourceToDataTable;
	:PARAMETERS sDataSourceLocation, aParams;
	
	:DECLARE ds;	
	ds := DoProc("DataSourceToDataSet", {sDataSourceLocation, aParams});
			
	:RETURN ds:Tables[0];
:ENDPROC;
/* endregion;

/* region DataSourceToDataView(sDataSourceLocation : string, aParams : object[]) : DataTable;
:PROCEDURE DataSourceToDataView;
	:PARAMETERS sDataSourceLocation, aParams;
	
	:DECLARE dt;	
	dt := DoProc("DataSourceToDataTable", {sDataSourceLocation, aParams});
			
	:RETURN dt:DefaultView;
:ENDPROC;
/* endregion;

/* region DataSourceToObjects(sDataSourceLocation : string, aParams : object[]) : udObject[];
/*	udObject
	- all row columns as properties;
		
:PROCEDURE DataSourceToObjects;
	:PARAMETERS sDataSourceLocation, aParams;

	:DECLARE dt;
	dt := DoProc("DataSourceToDataTable", {sDataSourceLocation, aParams});
			
	:RETURN DoProc("DataTableToObjects", {dt});
:ENDPROC;
/* endregion;

/* region QueryToDataSet(sSqlStatement : string, aParams : object[], [sConnection] : string, [sTableName] : string, [bNullAsBlank] : boolean) : DataSet;		
:PROCEDURE QueryToDataSet;
	:PARAMETERS sSqlStatement, aParams, sConnection, sTableName, bNullAsBlank;
	:DEFAULT sTableName, Nil;
	:DEFAULT sConnection, "DATABASE";
	
	:DECLARE ds;
	ds := GetDataSetEx(sSqlStatement, sConnection, aParams, .T., .T., sTableName, bNullAsBlank);
	ds := ExecFunction("Enterprise_Server.DataSetSupport.DsFromString", {ds});
			
	:RETURN ds;
:ENDPROC;
/* endregion;

/* region QueryToDataTable(sSqlStatement : string, aParams : object[], [sConnection] : string, [sTableName] : string, [bNullAsBlank] : boolean) : DataSet;		
:PROCEDURE QueryToDataTable;
	:PARAMETERS sSqlStatement, aParams, sConnection, sTableName, bNullAsBlank;
	
	:DECLARE ds;
	ds := DoProc("QueryToDataSet", {sSqlStatement, aParams, sConnection, sTableName, bNullAsBlank});
		
	:RETURN ds:Tables[0];
:ENDPROC;
/* endregion;

/* region QueryToObjects(sSqlStatement : string, aParams : object[], [sConnection] : string, [sTableName] : string) : DataSet;		
:PROCEDURE QueryToObjects;
	:PARAMETERS sSqlStatement, aParams, sConnection, sTableName;
	
	:DECLARE dt;
	dt := DoProc("QueryToDataTable", {sSqlStatement, aParams, sConnection, sTableName});
			
	:RETURN DoProc("DataTableToObjects", {dt});
:ENDPROC;
/* endregion;

/* region QueryToDataView(sSqlStatement : string, aParams : object[], [sConnection] : string, [sTableName] : string, [bNullAsBlank] : boolean) : DataSet;		
:PROCEDURE QueryToDataView;
	:PARAMETERS sSqlStatement, aParams, sConnection, sTableName, bNullAsBlank;
	
	:DECLARE dt;
	dt := DoProc("QueryToDataTable", {sSqlStatement, aParams, sConnection, sTableName, bNullAsBlank});
		
	:RETURN dt:DefaultView;
:ENDPROC;
/* endregion;

/* region SingleRowDataSourceToObject(sDataSourceLocation : string, aParams : object[]) : udObject;
/* 	udObject
	- contains all the columns of the first row as properties in a single object;
		
:PROCEDURE SingleRowDataSourceToObject;
	:PARAMETERS sDataSourceLocation, aParams;

	:DECLARE ds, o;
	ds := DoProc("DataSourceToDataSet", {sDataSourceLocation, aParams});
	o  := DoProc("SingleRowDataSetToObject", {ds});
			
	:RETURN o;
:ENDPROC;
/* endregion;

/* region SingleRowQueryToObject(sSqlStatement : string, aParams : object[], [sConnection] : string, [bNullAsBlank] : boolean) : udObject;
/* 	udObject
	- contains all the columns of the first row as properties in a single object;
		
:PROCEDURE SingleRowQueryToObject;
	:PARAMETERS sSqlStatement, aParams, sConnection, bNullAsBlank;
	:DEFAULT sConnection, "DATABASE";
	
	:DECLARE ds, o;
	ds := DoProc("QueryToDataSet", {sSqlStatement, aParams, sConnection, bNullAsBlank});
	o  := DoProc("SingleRowDataSetToObject", {ds});
			
	:RETURN o;
:ENDPROC;
/* endregion;  

/* region GetNewEmptyDataTable([sTableName] : string) : DataTable;
:PROCEDURE GetNewEmptyDataTable;
	:PARAMETERS sTableName;
	:DEFAULT sTableName, "Table";
	
	:DECLARE ds, dt;
			
	ds := LimsNetConnect("", "System.Data.DataSet");
	dt := LimsNetConnect("", "System.Data.DataTable");
	ds:DataSetName := "DataSet";
	dt:TableName := sTableName;
	ds:Tables:Add(dt);
			
	:RETURN dt;
:ENDPROC;
/* endregion;

/* region DataTableToObjects(dt : DataTable) : udObject[];
/*	udObject
	- all row columns as properties;
		
:PROCEDURE DataTableToObjects;
	:PARAMETERS dt;
	
	:DECLARE objectCollection;
	:DECLARE i;
	objectCollection := {};
			
	:FOR i := 0 :TO dt:Rows:Count - 1;
		AAdd(objectCollection, DoProc("DataRowToObject", {dt:Rows[i]}));
	:NEXT;
			
	:RETURN objectCollection;
:ENDPROC;
/* endregion;

/* region ReduceColumns(dt : DataTable, aColumnNames : string[]) : void;
:PROCEDURE ReduceColumns;
	:PARAMETERS dt, aColumnNames;
	
	:DECLARE i, j;
	:DECLARE col;
	:DECLARE bFound;
			
	:FOR i := dt:Columns:Count - 1 :TO 0 :STEP -1;
		col := dt:Columns[i];
		bFound := .F.;
						
		:FOR j := 1 :TO aColumnNames:Length;
			:IF Lower(aColumnNames[j]) == Lower(col:Caption);
				bFound := .T.;
			:ENDIF;
		:NEXT;
						
		:IF !bFound;
			dt:Columns:Remove(col);
		:ENDIF;
	:NEXT;
:ENDPROC;
/* endregion;

/* region GetDistinctDataTable(dt, aColumns);
/***********************************************************************************
Description : 
	Gets a distinct dataTable from the supplied dataTable based on the columns supplied

Parameters :
	- dt : DataTable
	- aColumns : string[] - the column names must exist in the dataTable
				
Returns : 
	- dtDistinct : DataTable
************************************************************************************;
:PROCEDURE GetDistinctDataTable;
	:PARAMETERS dt, aColumns;

	:DECLARE ds, dv, dtDistinct;
		
	ds := LimsNetConnect("", "System.Data.DataSet");
	dv := LimsNetConnect("", "System.Data.DataView", {dt});
	dtDistinct := dv:ToTable(.T., LimsNetCast(aColumns, "System.String[]"));
		
	ds:Tables:Add(dtDistinct);
	ds:DataSetName := "DataSet";
		
	:RETURN dtDistinct;
:ENDPROC;
/* endregion;

/* region ExtractColumn(dt, sColumnName);
/***********************************************************************************
Description : 
	Extracts a single column from a DataTable and converts that into an array

Parameters :
	- dt : DataTable
	- sColumnName : string - the column name must exist in the dataTable
				
Returns : 
	- aColumnValues : object[]
************************************************************************************;
:PROCEDURE ExtractColumn;
	:PARAMETERS dt, sColumnName;
	
	:DECLARE dtDistinct, row;
	:DECLARE i;
	:DECLARE aColumnValues;
		
	dtDistinct := DoProc("GetDistinctDataTable", {dt, {sColumnName}});
	aColumnValues := {};
		
	:FOR i := 0 :TO dtDistinct:Rows:Count - 1;
		row := dtDistinct:Rows[i];
				
		:IF !row:IsNull(sColumnName);
			AAdd(aColumnValues, row[sColumnName]);
		:ENDIF;
	:NEXT;
		
	:RETURN aColumnValues;
:ENDPROC;
/* endregion;