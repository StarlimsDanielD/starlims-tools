/********************************************************************************
Description.. :	Inheritable class to process instrument files

Parameters... :	sRootSettingsPath : string
					This parameter must be a path in the generic settings
					This root path is expected to have the following child settings:
						- /FilePaths/Read | All files in this folder are processed
						- /FilePaths/Processed | Files that have valid results are moved here
						- /FilePaths/Error | Files that have errors are moved here 
						- /FileParserSettings/Script | Which script does the parsing of the file
						- /ExpectedAnalytes/ | Should contain a list of analytes that are in the file and will be processed (i.e. the file could contain more analytes)
							- /Code | Analyte as named in the file
							- /Value | Analyte as known STARLIMS
							Multiple code/value entries are allowed
						- ExpectedFileExtensions | Should contain a list of file extension names that will be processed, together with the reading scrip/class
							- /Code | name of the extension, without the dot (e.g. xml, csv)
							- /Value | location of the script that will handle the file content reading
							Multiple code/value entries are allowed
					
					The parsing script must have the following signature:
				 	Parameters
						- sFilePath | File that is to be parsed
					Returns 
						- udParsed[]
							.OrdNo : string
							.Analyte : string
							.Result : string
							.[TestCode] : string
							.[Rn1] : string
							 ..
							.[Rn10] : string
							.[DateEntered] : dateTime
							
Example use.. :	
				:DECLARE processor
				processor := CreateUdObject("_Interfaces.ResultsFileProcessorClass", {"/Interfaces/FileBasedIn/InstrumentFiles/Lactoscoop/"})
				processor:Process()
				
Returns...... :	- 

Author....... :	DDA
Date......... : 2021-10-29
********************************************************************************
_______________________________________________________________________________

Ticket #..... :	
Modification. : 
Author....... :	
Date......... :	
_______________________________________________________________________________
********************************************************************************/;
:CLASS ResultsFileProcessor;
	:DECLARE ExpectedAnalytes;
	:DECLARE ExpectedFileExtensions;
	:DECLARE Log;
	:DECLARE Paths;
	:DECLARE ParserSettings;
	:DECLARE LogSettings;
	
	/* region private members;
	:DECLARE __path;
	:DECLARE __file;
	:DECLARE __dir; 
	/* endregion;
	
	/* region Ctor(sRootSettingsPath : string);
	:PROCEDURE Constructor;
		:PARAMETERS sRootSettingsPath;
		
		Me:Init(sRootSettingsPath);
	:ENDPROC;
	/* endregion;
	
	/* region public Init(sRootSettingsPath : string) : void;
	:PROCEDURE Init;
		:PARAMETERS sRootSettingsPath;
					
		Me:__path := LimsNetConnect("", "System.IO.Path");
		Me:__file := LimsNetConnect("", "System.IO.File");
		Me:__dir  := LimsNetConnect("", "System.IO.Directory");

		Me:Log := {};
		
		Me:Paths := CreateUdObject();
		Me:Paths:Read      := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "FilePaths/Read", "", 0});
		Me:Paths:Processed := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "FilePaths/Processed", "", 0});
		Me:Paths:Error     := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "FilePaths/Error", "", 0});
		
		Me:LogSettings := CreateUdObject();
		Me:LogSettings:WriteOnSuccess := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "Logging/WriteToLog/OnSuccess", .T., 0});
		Me:LogSettings:WriteOnFailure := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "Logging/WriteToLog/OnFailure", .T., 0});
		
		Me:ParserSettings := CreateUdObject();
		Me:ParserSettings:Script := ExecFunction("GenericSettings.GetValue", {sRootSettingsPath + "FileParserSettings/Script", "", 0});
		
		Me:ExpectedAnalytes := LSelect1("
			select 	CODE, VALUE 
			from 	SETT_SETTINGS 
			where 	GROUP_PATH = ?",, {sRootSettingsPath + "ExpectedAnalytes"});
		
		Me:ExpectedFileExtensions := LSelect1("
			select 	CODE, VALUE 
			from 	SETT_SETTINGS 
			where 	GROUP_PATH = ?",, {sRootSettingsPath + "ExpectedFileExtensions"});
	:ENDPROC;
	/* endregion;
	
	/* region public Process() returns bSuccess : boolean;
	:PROCEDURE Process;
		:DECLARE i;
		:DECLARE fileResp;
		:DECLARE aFiles;
		:DECLARE sFilePath, sFileName, sMoveTo, sFileNameLog, sLogTo;
		
		Me:__dir:CreateDirectory(Me:Paths:Processed);
		Me:__dir:CreateDirectory(Me:Paths:Error);
			
		aFiles := Me:__dir:GetFiles(Me:Paths:Read);

		:FOR i := 1 :TO aFiles:Length;
			sFilePath    := aFiles[i];
			sFileName    := Me:__path:GetFileName(sFilePath);
			sFileNameLog := Me:__path:GetFileNameWithoutExtension(sFilePath) + ".log";
			
			fileResp := Me:ProcessFile(sFilePath);
			
			/* move the file to mark it processed/failed;
			:IF fileResp:NoOfValidResults > 0;	
				sMoveTo := Me:__path:Combine(Me:Paths:Processed, sFileName);
				
				:IF Me:LogSettings:WriteOnSuccess .or. (fileResp:NoOfFailedResults > 0 .And. Me:LogSettings:WriteOnFailure);
					sLogTo := Me:__path:Combine(Me:Paths:Processed, sFileNameLog);
				:ENDIF;
			:ELSE;		
				sMoveTo := Me:__path:Combine(Me:Paths:Error, sFileName);
				
				:IF Me:LogSettings:WriteOnFailure;
					sLogTo := Me:__path:Combine(Me:Paths:Error, sFileNameLog);
				:ENDIF;
			:ENDIF;
			
			:IF Me:__file:Exists(sMoveTo);
				Me:__file:Delete(sMoveTo);
			:ENDIF;
	
			Me:__file:Move(sFilePath, sMoveTo);
			
			:IF !Empty(sLogTo);
				WriteText(sLogTo, ToJson(fileResp));
			:ENDIF;
		:NEXT;	
		
		:RETURN .T.;
	:ENDPROC;
	/* endregion;
	
	/* region public ProcessFile(sFilePath : string) returns logFile : udLogFile;
	/*	udLogFile
			.FilePath : string
			.[ErrorMessage] : string
			.NoOfValidResults : int
			.NoOfFailedResults : int
			.ParserResults : ud
				.Success : parserConclusion[]
					.Parsed : udParsed
					.ProcessorResult
						.Success : boolean
						.[Skip] : boolean
						.[Message] : string
						.[ErrorMessage] : string
				.Failed  : parserConclusion[];
				
	:PROCEDURE ProcessFile;
		:PARAMETERS sFilePath;
		
		:DECLARE i;
		:DECLARE logFile, parserResult, parserConclusion, fileReaderResponse;
		:DECLARE aParserResults;
			
		logFile := CreateUdObject();
		logFile:FilePath := sFilePath;
		logFile:ParserResults := CreateUdObject();
		logFile:ParserResults:Success := {};
		logFile:ParserResults:Failed := {};
		logFile:ParserResults:Skipped := {};
		logFile:NoOfValidResults := 0;
		logFile:NoOfFailedResults := 0;
		
		fileReaderResponse := Me:__tryGetFileReader(sFilePath);

		:IF fileReaderResponse:Success;
			/* process the file;
			aParserResults := ExecFunction(Me:ParserSettings:Script, {fileReaderResponse:FileReader});
				
			:FOR i := 1 :TO aParserResults:Length;
				parserResult := aParserResults[i];
				
				processResp := Me:ProcessResult(parserResult);
				parserConclusion := CreateUdObject({
					{"Parsed", parserResult}, 
					{"ProcessorResult", processResp}
				});
				
				:IF	processResp:IsProperty("Skip") .And. processResp:Skip;
					AAdd(logFile:ParserResults:Skipped, parserConclusion);
				:ELSE;
					:IF processResp:Success;
						logFile:NoOfValidResults++;
						AAdd(logFile:ParserResults:Success, parserConclusion);
					:ELSE;
						logFile:NoOfFailedResults++;
						AAdd(logFile:ParserResults:Failed, parserConclusion);
					:ENDIF;	
				:ENDIF;
			:NEXT;
		:ELSE;
			logFile:ErrorMessage := fileReaderResponse:ErrorMessage;
		:ENDIF;
		
		AAdd(Me:Log, logFile);
		
		:RETURN logFile;
	:ENDPROC;
	/* endregion;
	
	/* region public ProcessResult(parserResult : udParsed) returns resp : udResponse;
	/*	udResponse
			.Success : boolean
			.[Skip] : boolean
			.[Message] : string
			.[ErrorMessage] : string;
			
	:PROCEDURE ProcessResult;
		:PARAMETERS parserResult;
		
		:DECLARE parserPrep;
		parserPrep := Me:PrepareParsedData(parserResult);
		
		:IF parserPrep:Success .and. !parserPrep:Skip;
			:RETURN Me:__tryUpdateResultData(parserResult);
		:ELSE;
			:RETURN parserPrep;
		:ENDIF;
	:ENDPROC;
	/* endregion;
	
	/* region public PrepareParsedData(parsed : udParsed) returns resp : udResponse;
	/*	udResponse
			.Success : boolean
			.Skip : boolean
			.[Message] : string;
			
	:PROCEDURE PrepareParsedData;
		:PARAMETERS parsed;
		
		:DECLARE response;
		:DECLARE sExpectedAnalyte;
		
		response := CreateUdObject();
		response:Success := .T.;
		response:Skip := .F.;
		
		Me:__ensureProperty(parsed, "TestCode", -1);		
		parsed:Result := Replace(LStr(parsed:Result), ",", ".");
		sExpectedAnalyte := Me:__getExpectedStarlimsAnalyte(parsed:Analyte);
		
		:IF !Empty(sExpectedAnalyte);		
			parsed:Analyte := sExpectedAnalyte;
		:ELSE;
			response:Skip    := .T.;
			response:Message := "Unexpected analyte: skipped";
		:ENDIF;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
	
	/* region public UpdateResult(nOrigRec : int, sNumRes : string) returns resp : udResponse;
	/*	udResponse
			.Success : boolean
			.[ErrorMessage] : string;
			
	:PROCEDURE UpdateResult;
		:PARAMETERS nOrigRec, sNumRes;
		
		:DECLARE aNumResUpdate;
		:DECLARE response, saveResult;
		
		response	  := CreateUdObject();		
		aNumResUpdate := ExecFunction("RUNBUILD_RESENT_APPROVE.NUMRESUPDATE", {nOrigRec, sNumRes, "Interfaced result"});
		saveResult    := Me:__analyzeNumresUpdateResponse(aNumResUpdate);
		
		:IF saveResult:Success;
			/* The update below depends on the dictionary version;
			RunSql("
				update 	RESULTS 
				set 	NUMRES = ?, FINAL = ?, RESULTASNUMERIC = ?, FIRSTUSER = ?,
						RN1 = ?, RN2 = ?, RN3 = ?, RN4 = ?, RN5 = ?, RN6 = ?, RN7 = ?, 
						RN8 = ?, RN9 = ?, RN10 = ?, AI = ?, S = ?, UNITS = ?, DATEENTER = ?
				where 	ORIGREC = ?",, {saveResult:NumRes, saveResult:Final, saveResult:ResultAsNumeric, saveResult:FirstUser, 
				saveResult:Rn1, saveResult:Rn2, saveResult:Rn3, saveResult:Rn4, saveResult:Rn5, saveResult:Rn6, saveResult:Rn7, 
				saveResult:Rn8, saveResult:Rn9, saveResult:Rn10, saveResult:Ai, saveResult:Status, saveResult:Units, Now(), 
				nOrigRec});
			
			response:Success := .T.;
		:ELSE;
			response:Success := .F.;
			response:ErrorMessage := saveResult:ErrorMessage;
		:ENDIF;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
	
	/* region public UpdateResultFields(nOrigRec : int, updateFields : udUpdateFields) returns bSuccess : boolean;
	/*	udUpdateFields
			.[Rn1] : string
			 ..
			.[Rn10] : string
			.[DateEntered] : dateTime;
			
	:PROCEDURE UpdateResultFields;
		:PARAMETERS nOrigRec, updateFields;
		
		:DECLARE i;
		:DECLARE sRnX;
		:DECLARE aUpdate, aParams;
		
		aUpdate := {};
		aParams := {};
		
		/* handle RN1 - RN10;
		:FOR i := 1 :TO 10;
			sRnX := "RN" + LStr(i);
			
			:IF updateFields:IsProperty(sRnX);
				AAdd(aUpdate, sRnX + " = ?");
				AAdd(aParams, updateFields:GetProperty(sRnX));
			:ENDIF;
		:NEXT;
		
		/* handle additional result fields;
		:IF updateFields:IsProperty("DateEnter");
			AAdd(aUpdate, "DATEENTER = ?");
			AAdd(aParams, updateFields:DateEnter);
		:ENDIF;
		
		:IF aParams:Length > 0;
			AAdd(aParams, nOrigRec);
			
			RunSql("update RESULTS set " + BuildString(aUpdate) + "	where ORIGREC = ?",, aParams);
		:ENDIF;
		
		:RETURN .T.;
	:ENDPROC;
	/* endregion;
	
	/* region private methods;
	
	/* region private __tryUpdateResultData(resultData : udResultData) returns resp : udResponse;
	/*	udResultData
			.OrdNo : string
			.Analyte : string
			.[TestCode] : int
			.[Rep] : int
			
		udResponse
			.Success : boolean
			.[ErrorMessage] : string;
			
	:PROCEDURE __tryUpdateResultData;
		:PARAMETERS resultData;
		
		:DECLARE aNumResUpdate;
		:DECLARE response, resultRecord;
		
		response := CreateUdObject();
		response:Success := .T.;
				
		/* validate the result record and update it if valid;
		resultRecord := Me:__getResult(resultData);
		
		:BEGINCASE;
			:CASE resultRecord == Nil;
				response:Success := .F.;
				response:ErrorMessage := "noUniqueResultFound";
			:EXITCASE;
			
			:CASE resultRecord:Status != Logged;
				response:Success := .F.;
				response:ErrorMessage := "resultNotLogged";
			:EXITCASE;
			
			:OTHERWISE;
				response := Me:__updateResultData(resultRecord, resultData);
				
		:ENDCASE;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
	
	/* region private __updateResultData(resultRecord, resultData);
	:PROCEDURE __updateResultData;
		:PARAMETERS resultRecord, resultData;
		
		:DECLARE bCommit;
		:DECLARE response;
		
		response := CreateUdObject();
		response:Success := .T.;
		
		bCommit := .F.;
		
		BeginLimsTransaction("DATABASE");
		
		:TRY;
			/* first, update according to numresUpdate if a result was provided;
			:IF resultData:IsProperty("Result");
				response := Me:UpdateResult(resultRecord:OrigRec, resultData:Result);
			:ENDIF;

			/* then overwrite/update fields, according to given result data;
			:IF response:Success;
				Me:UpdateResultFields(resultRecord:OrigRec, resultData);
			:ENDIF;
			
			bCommit := response:Success;
		:FINALLY;
			EndLimsTransaction("DATABASE", bCommit);
		:ENDTRY;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
	
	/* region private __getResult(args : udArgs) returns udResult : udResult;
	/*	udArgs
			.OrdNo : string
			.Analyte : string
			.[TestCode] : int
			.[Rep] : int
		
		udResult
			.OrigRec : int
			.TestCode : int 
			.Status : string;
			
	:PROCEDURE __getResult;
		:PARAMETERS args;
		
		:DECLARE aResultData;
		Me:__ensureProperty(args, "Rep", 1);
		Me:__ensureProperty(args, "TestCode", -1);
		
		aResultData := LSelect("
			select 	ORIGREC, TESTCODE , S
			from 	RESULTS 
			where 	ORDNO = ? 
			and		(? = -1 or TESTCODE = ?)
			and 	ANALYTE = ?
			and		REP = ?",,, {args:OrdNo, args:TestCode, args:TestCode, args:Analyte, args:Rep});

		:IF aResultData:Length == 1;
			:RETURN CreateUdObject({
				{"OrigRec", aResultData[1,1]},
				{"TestCode", aResultData[1,2]},
				{"Status", aResultData[1,3]}
			});
		:ELSE;
			:RETURN Nil;
		:ENDIF;
	:ENDPROC;
	/* endregion;
	
	/* region private __analyzeNumresUpdateResponse(numresUpdateResponse : object[]) returns udResponse;
	/*	udResponse
			.Success : boolean
			.[ErrorMessage] : string
			.[NumRes] : string
			.[Final] : string
			.[ResultAsNumeric] : decimal
			.[FirstUser] : string
			.[Rn1] : string
			 ..
			.[Rn10] : string
			.[Ai] : string
			.[Status] : string
			.[Units] : string;
			
	:PROCEDURE __analyzeNumresUpdateResponse;
		:PARAMETERS numresUpdateResponse;
	
		:DECLARE resp;
		:DECLARE aNumResUpdate;
		
		resp := CreateUdObject();
		
		:BEGINCASE;
			:CASE numresUpdateResponse == "NUMERICFAIL";
				resp:ErrorMessage := "NUMERICFAIL";
			:EXITCASE;
		
			:CASE numresUpdateResponse == "MISSINGVALUES";
				resp:ErrorMessage := "MISSINGVALUES";
			:EXITCASE;
			
			:CASE LimsTypeEx(numresUpdateResponse[1]) == "STRING" .and. numresUpdateResponse[1] == "STOP";
				resp:ErrorMessage := numresUpdateResponse[2];
			:EXITCASE;
			
			:OTHERWISE;
				aNumResUpdate		 := numresUpdateResponse[2];
				resp:NumRes			 := aNumResUpdate[1];
				resp:Final			 := aNumResUpdate[2];
				resp:ResultAsNumeric := aNumResUpdate[4];
				resp:FirstUser		 := aNumResUpdate[5];
				resp:Rn1			 := aNumResUpdate[6];
				resp:Rn2			 := aNumResUpdate[7];
				resp:Rn3			 := aNumResUpdate[8];
				resp:Rn4			 := aNumResUpdate[9];
				resp:Rn5			 := aNumResUpdate[10];
				resp:Rn6			 := aNumResUpdate[11];
				resp:Rn7			 := aNumResUpdate[12];
				resp:Rn8			 := aNumResUpdate[13];
				resp:Rn9			 := aNumResUpdate[14];
				resp:Rn10			 := aNumResUpdate[15];
				resp:Ai				 := aNumResUpdate[16];
				resp:Status			 := aNumResUpdate[17];
				resp:Units			 := aNumResUpdate[18];
		:ENDCASE;
		
		resp:Success := !resp:IsProperty("ErrorMessage") .or. Empty(resp:ErrorMessage);
		
		:RETURN resp;
	:ENDPROC;
	/* endregion;
	
	/* region private __ensureProperty(o : ud, sProperty : string, defaultValue : ud) : void;
	:PROCEDURE __ensureProperty;
		:PARAMETERS o, sProperty, defaultValue;
		
		:IF !o:IsProperty(sProperty);
			o:SetProperty(sProperty, defaultValue);
		:ENDIF;
	:ENDPROC;
	/* endregion;
	
	/* region private __getExpectedStarlimsAnalyte(sInstrumentAnalyte : string) returns sAnalyte : string;
	:PROCEDURE __getExpectedStarlimsAnalyte;
		:PARAMETERS sInstrumentAnalyte;
		
		:DECLARE nLocation;		
		nLocation := AscanExact(ExtractCol(Me:ExpectedAnalytes, 1), sInstrumentAnalyte);
		
		:IF nLocation > 0;
			:RETURN Me:ExpectedAnalytes[nLocation, 2];
		:ELSE;
			:RETURN "";
		:ENDIF;
	:ENDPROC;
	/* endregion;
	
	/* region private __tryGetFileReader(sFilePath : string) returns response : udResp;
	/*	udResp
			.Success : boolean
			.[ErrorMessage] : string
			.[FileReader] : ud class;
			
	:PROCEDURE __tryGetFileReader;
		:PARAMETERS sFilePath;
		
		:DECLARE sExt;
		:DECLARE nExpectedExt;
		:DECLARE sReaderClass;
		:DECLARE aExpectedExtensions;
		:DECLARE response;
		
		response := CreateUdObject();
		response:Success := .T.;
		
		sExt := Me:__path:GetExtension(sFilePath);
		aExpectedExtensions := ExtractCol(Me:ExpectedFileExtensions, 1);
		
		:IF sExt:StartsWith(".");
			sExt := SubStr(sExt, 2);
		:ENDIF;

		nExpectedExt := AScanExact(aExpectedExtensions, sExt);
		
		:IF nExpectedExt == 0;	
			/* maybe it was configured as ".ext";
			nExpectedExt := AScanExact(aExpectedExtensions, "." + sExt);
		:ENDIF;
		
		:IF nExpectedExt > 0;	
			sReaderClass  := Me:ExpectedFileExtensions[nExpectedExt, 2];
			response:FileReader := CreateUdObject(sReaderClass, {sFilePath});
		:ELSE;
			response:Success := .F.;
			response:ErrorMessage := "Extension " + sExt + " was not an expected file extension";
		:ENDIF;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
	
	/* endregion;
