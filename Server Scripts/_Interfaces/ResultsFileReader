/********************************************************************************
Description.. :	Basic class for reading ascii based result files.

				The idea is to inherit this class into another class that solely
				manages reading the content from a file or managing that content
				via classes like XmlDocument or EPPlus
				
				To do the latter, override the buildContentsManager() method

Parameters... :	- 

Returns...... :	- 

Author....... :	DDA
Date......... : 2021-12-10
********************************************************************************
_______________________________________________________________________________

Ticket #..... :	
Modification. : 
Author....... :	
Date......... :	
_______________________________________________________________________________
********************************************************************************/;
:CLASS ResultsFileReader;
	:DECLARE FilePath;

	/* region Constructor(sFilePath : string);
	:PROCEDURE Constructor;
		:PARAMETERS sFilePath;
		
		Me:Init(sFilePath);
	:ENDPROC;
	/* endregion;
	
	/* region protected Init(sFilePath : string);
	:PROCEDURE Init;
		:PARAMETERS sFilePath;
	
		Me:FilePath := sFilePath;
	:ENDPROC;
	/* endregion;
	
	/* region public GetContents() returns sContent : string;
	:PROCEDURE GetContents;
		:RETURN Me:__tryInvokeMethodNTimes("buildContents");
	:ENDPROC;
	/* endregion;
	
	/* region public GetContentsManager() returns object;
	:PROCEDURE GetContentsManager;
		:RETURN Me:__tryInvokeMethodNTimes("buildContentsManager");
	:ENDPROC;
	/* endregion;
	
	/* region protected buildContentsManager() returns Nil;
	:PROCEDURE buildContentsManager;
		/* override this method where needed;
		:RETURN Nil;
	:ENDPROC;
	/* endregion;
	
	/* region protected buildContents() returns sContent : string;
	:PROCEDURE buildContents;
		:RETURN ReadText(Me:FilePath);
	:ENDPROC;
	/* endregion;
	
	/* region private __tryInvokeMethodNTimes(sMethodName : string, [aParams] : object[], [n] : int, [nWait] : int);
	:PROCEDURE __tryInvokeMethodNTimes;
		:PARAMETERS sMethodName, aParams, n, nWait;
		:DEFAULT aParams, Nil;
		:DEFAULT n, 10;
		:DEFAULT nWait, 1;
		
		:DECLARE i;
		:DECLARE response;
		
		/* try to get a handle on the file and read its contents;
		:FOR i := 1 :TO n;
			:TRY;
				response := Me:InvokeMethod(sMethodName, aParams);
				:EXITFOR;
			:CATCH;
				/* it is unavailable, maybe it is still being written to;
				LWait(nWait);
			:ENDTRY;
		:NEXT;
		
		:RETURN response;
	:ENDPROC;
	/* endregion;
